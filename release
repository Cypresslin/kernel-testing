#!/usr/bin/env python
#

from os                                 import getenv
from logging                            import error, basicConfig, DEBUG, WARNING, INFO

from lib.argparse                       import ArgumentParser, RawDescriptionHelpFormatter
from lib.configuration                  import Configuration
from lib.shell                          import ShellError, ShellTimeoutError
from lib.maas                           import MAASCore
from lib.log                            import Clog, center, cleave

# Release
#
class Release():
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        s.args = args

    # main
    #
    def main(s):
        center('Release::main')
        retval = 1
        try:
            c = Configuration[Configuration["systems"][s.args.target]["provisioner"]]

            maas = MAASCore(c['server'], c['user'], c['profile'], c['creds'])
            mt = maas.node(s.args.target)
            mt.stop_and_release()

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        except ShellTimeoutError as e:
            error('The command (%s) timed out. (%d)' % (e.cmd, e.timeout))

        except ShellError as e:
            error('The command (%s) returned a non-zero exit status (%d).' % (e.cmd, e.returncode))
            for line in e.output:
                error(line.rstrip())

        if retval > 0:
            error("")
            error("Due to the above error(s), this script is unable to continue and is terminating.")
            error("")

        cleave('Release::main')
        return retval

if __name__ == '__main__':
    app_description = '''
    '''

    app_epilog = '''
    '''

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('target', metavar='TARGET', type=str, nargs=1, help='The name of the system to be provisioned.')
    parser.add_argument('--debug', action='store_true', default=False, help='Print out lots of stuff.')
    parser.add_argument('--nc', action='store_true', default=False, help='Debut output should not be colored.')

    args = parser.parse_args()
    args.target = args.target[0]

    if args.debug:
        level = DEBUG
        Clog.dbg = True
        Clog.color = not args.nc
    else:
        level = WARNING

    basicConfig(level=level, format="%(levelname)s - %(message)s")

    app = Release(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:

