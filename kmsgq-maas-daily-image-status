#!/usr/bin/env python
#

from os                                 import makedirs, path
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING
from lib.log                            import cdebug, center, cleave
from lib.msgq                           import MsgQueue
import json

# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args

    # _handler
    #
    def _handler(s, payload):
        fname = '%s.%s' % (payload['series-name'], payload['sut-arch'])
        p = path.join(s.args.root, fname)
        with open(p, 'w') as f:
            f.write(payload)

    # main
    #
    def main(s):
        '''
        '''
        center("TheApp::main")
        retval = 1

        makedirs(s.args.root)
        queue = 'kernel-maas-status-monitor'
        key = 'kernel.maas.job.status'
        try:
            if args.local:
                mq = MsgQueue(address='localhost', port=9123)
            else:
                mq = MsgQueue()
            mq.listen(queue, key, s._handler)

            print("done")
            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        cleave("TheApp::main")
        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
Monitor the kernel RabbitMQ exchange and handle any messages with
the 'kernel-testing-status' key.
    '''
    app_epilog = '''
examples:
    kmsgq-maas-daily-image-status /var/lib/jenkins/metrics/maas-status
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('root', help='Path to where the status messages are to be stored')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=WARNING, format=log_format)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

