#!/usr/bin/env python
#

import sys
import os
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, INFO, DEBUG, info, warning
from lib.msgq                           import MsgQueue
from lib.configuration                  import Configuration
from lib.testsprops                     import SRU_TestsList
from time                               import sleep
from lib.shell                          import sh, ShellError
import json

# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args
        s.jenkins_url_default = "http://10.245.80.32:8080"
        s.job_defaults = {
            'key'            : 'kernel.testing.test.request',
            'who'            : None,
            'op'             : 'bogus',
            'date'           : '1960.11.02_08.00.00',
            'hwe'            : False,
            'ppa'            : None,
            'url'            : None,
            'decoration'     : None,
        }

        # Create a dictionary of the lab HW keyed by role.
        #
        s.sut_pool = {}
        for sut in Configuration['systems']:
            role = Configuration['systems'][sut]['role']

            try:
                s.sut_pool[role].append(sut)
            except:
                s.sut_pool[role] = []
                s.sut_pool[role].append(sut)

        s.jjc = os.path.dirname(sys.argv[0])
        s.jjc = os.path.join(s.jjc, 'jenkins-job-creator', 'jjc')

    # _handler
    #
    def _handler(s, payload):
        print("enter handler")

        job = s.job_defaults

        # Anything / everything in the payload overrides the defaults.
        #
        for k in payload:
            print("    copying " + k)
            job[k] = payload[k]    # Generated by the request, copied as is.

        # Fixup anything that might be missing from the payload that is
        # required for creating a job.
        #
        for k in ['systems', 'arches', 'tests']:
            print(k)
            if k not in job:
                if 'arches' == k:
                    print("    fixing %s" % k)
                    job['arches'] = []
                    for sys in job['systems']:
                        for a in Configuration['systems'][sys]['arch']:
                            if a not in job['arches']:
                                job['arches'].append(a)


                if 'systems' == k:
                    print("    fixing %s" % k)
                    if 'sru' == job['op']:
                        job['systems'] = s.valid_systems('SRU Testing', job['series-name'])
                        if 'ubuntu_fs_fio_perf' in job['tests']:
                            for system in s.valid_systems('Filesystem Benchmarking', job['series-name']):
                                job['systems'].append(system)
                    elif 'request' == job['op']:
                        job['systems'] = s.valid_systems('Personal Testing', job['series-name'])
                        job['decoration'] = None

                if 'tests' == k:
                    print("    fixing %s" % k)
                    if 'sru' == job['op']:
                        job['tests'] = SRU_TestsList
                    else:
                        job['tests'] = ['default']

        # 
        for t in job['tests']:
            created = s.create_test_jobs(series=job['series-name'],
                                      arches=job['arches'],
                                      systems=job['systems'],
                                      series_decoration=job['decoration'],
                                      tests=t,
                                      url=job['url'],
                                      user=job['who'],
                                      hwe=job['hwe'],
                                      ppa=job['ppa'])
            if created is not None:
                info('The following jenkins jobs were created')
                for j in created:
                    info('    %s' % j)

        print("leave handler")

    # valid_systems
    #
    def valid_systems(s, key, series):
        retval = []
        for system in s.sut_pool[key]:
            try:
                if series in Configuration['systems'][system]['series-blacklist']: continue
            except KeyError:
                retval.append(system)
        return retval

    # create_test_jobs
    #
    def create_test_jobs(s, series, arches, systems, url=None, user=None, tests='default', series_decoration=None, hwe=False, ppa=None):
        print("        enter create_test_jobs")
        retval = []
        for arch in arches:
            for system in systems:
                if 'ubuntu_fs_fio_perf' == tests:
                    if 'scratch drive' not in Configuration['systems'][system]:
                        continue
                if arch not in Configuration['systems'][system]['arch']: continue

                cmd = s.jjc + ' --sut=real --hw=%s --sut-arch=%s --sut-series=%s --jenkins-url=%s --test=%s' % (system, arch, series, s.jenkins_url_default, tests)
                if series_decoration is not None:
                    cmd += ' --sut-series-decoration=%s' % series_decoration
                if url is not None:
                    cmd += ' --debs=%s' % (url)
                if user is not None:
                    cmd += ' --user=%s' % (user)
                if hwe:
                    cmd += ' --sut-hwe'
                if ppa:
                    cmd += ' --ppa=%s' % (ppa)
                print(cmd)
                (return_code, output) = sh(cmd, quiet=False)
                for line in output:
                    line = line.strip()
                    if 'created jenkins job:' in line:
                        (x, job) = line.split('job:', 1)
                        retval.append(job.strip())

        print("        enter create_test_jobs")
        return retval

    # main
    #
    def main(s):
        '''
        '''
        retval = 1

        try:
            if args.local:
                mq = MsgQueue(address='localhost', port=9123)
            else:
                mq = MsgQueue()
            mq.listen('kernel-testing-requests', 'kernel.testing.test.request', s._handler)

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            warning("Aborting ...")

        except Exit:
            print("")
            print("Due to the above error(s), this script is unable to continue and is terminating.")
            print("")

        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    jc --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--verbose', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.verbose:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=INFO, format=log_format)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

