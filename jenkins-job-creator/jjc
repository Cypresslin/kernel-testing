#!/usr/bin/env python
#
# Called by one of the jenkins matix jobs for every cell of
# the matix. This job creates the correct provision-job,
# testing-job combination based on the environment variables
# of the matrix job.
#

from sys                                import stdout, argv, exit
from os                                 import getenv, path
import json
from lib.argparse                       import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import debug, info, basicConfig, DEBUG, INFO
from mako.template                      import Template
from mako.exceptions                    import RichTraceback
from lib.jenkins                        import Jenkins, JenkinsException, LAUNCHER_SSH, LAUNCHER_COMMAND, LAUNCHER_WINDOWS_SERVICE
from lib.configuration                  import Configuration

# find_kt_home
#
def find_kt_home():
    return path.dirname(path.dirname(path.abspath(argv[0])))

# load_cfg
#
def load_cfg(file_name):
    """
    Load the configuration file, returning the same as a python object.
    """
    retval = None

    # Find it ...
    #
    fid = file_name
    if not path.exists(fid): # Current directory
        fid = path.join(path.expanduser('~'), file_name)
        if not path.exists(fid): # Users home directory
            fid = path.join(path.dirname(argv[0]), file_name)
            if not path.exists(fid):
                fid = None

    if fid is not None:
        with open(fid, 'r') as f:
            retval = json.load(f)
    else:
        print("Error: Failed to find the configuration file.")

    return retval

# Exit
#
class Exit():
    """
    If an error message has already been displayed and we want to just exit the app, this
    exception is raised.
    """
    pass

# InvalidException
#
class InvalidException(Exception):
    def __init__(self, v):
        self.value = v
    def __str__(self):
        return self.value

# InvalidSystemType
#
class InvalidSystemType(InvalidException):
    def __init__(self, v):
        InvalidException.__init__(self, v)

# InvalidKernelArch
#
class InvalidKernelArch(InvalidException):
    def __init__(self, v):
        InvalidException.__init__(self, v)

# InvalidKernelType
#
class InvalidKernelType(InvalidException):
    def __init__(self, v):
        InvalidException.__init__(self, v)

# InvalidSeries
#
class InvalidSeries(InvalidException):
    def __init__(self, v):
        InvalidException.__init__(self, v)

# SutJobsFactory
#
class SutJobsFactory():

    # __init__
    #
    def __init__(self, args):
        self.cfg = args
        server_url = self.cfg.jenkins_url
        self.jenkins = Jenkins(server_url)

    # load_template
    #
    def load_template(self, file_name):
        """
        Load the template file.
        """
        retval = None

        if file_name[0] == '/' or file_name[0] == '.':
            # The full path is specified. Use the name as is.
            #
            fid = file_name
        else:
            # Find it ...
            #
            fid = file_name
            if not path.exists(fid): # Current directory
                fid = path.join(path.dirname(argv[0]), file_name)
                if not path.exists(fid):
                    fid = None

        if fid is not None:
            with open(fid, 'r') as f:
                retval = Template(f.read())
        else:
            print("Error: Failed to find the template file.")

        return retval

    # create_job
    #
    def create_job(self, job_name, template_name, cfg):
        template = self.load_template(template_name)
        job_xml = template.render(data=cfg)

        try:
            self.jenkins.delete_job(job_name)
        except:
            pass

        self.jenkins.create_job(job_name, job_xml)
        info('created jenkins job: %s' % job_name)

    # job_name
    #
    def job_name(self, cfg):
        retval = ""

        # The job name starts with some form of the test name(s)
        #
        tests = cfg.test.split()
        if len(tests) == 1:
            retval += tests[0]
            retval += '__'
        else:
            retval += '-'.join(tests)
            retval = retval.replace('ubuntu', 'u')
            retval += '__'

        if self.cfg.sut == 'real':
            retval += cfg.sut_series.title()[0]
            if cfg.sut_hwe:
                retval += '-hwe'

            if self.cfg.sut_series_decoration is not None:
                retval += '_%s' % self.cfg.sut_series_decoration

            retval += '_%s__using_%s' % (cfg.sut_arch, cfg.sut_name)
        else:
            retval += cfg.sut_series.title()[0]
            if cfg.sut_hwe:
                retval += '-hwe'
            retval += '_%s' % cfg.sut_arch

            retval += '__on__'

            retval += cfg.vh_series.title()[0]
            if cfg.vh_hwe:
                retval += '-hwe'
            retval += '_%s' % cfg.vh_arch

            retval += '__using_%s' % cfg.vh_name

        try:
            if self.cfg.user is not None:
                retval += '__for_%s' % self.cfg.user
        except AttributeError:
            pass

        return retval

    # main
    #
    def main(self):
        retval = 1
        try:
            # Now, actually do something.
            #
            try:
                setattr(self.cfg, 'job_name', self.job_name(self.cfg))

                self.create_job(self.cfg.job_name, 'kernel-testing-job.mako', self.cfg)

                if not self.cfg.no_autostart:
                    self.jenkins.build_job(self.cfg.job_name)

                retval = 0

            except:
                traceback = RichTraceback()
                for (filename, lineno, function, line) in traceback.traceback:
                    print("File %s, line %s, in %s" % (filename, lineno, function))
                    for s in line:
                        stdout.write(s)
                print("%s: %s" % (str(traceback.error.__class__.__name__), traceback.error))

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        return retval


if __name__ == '__main__':

    result = 0


    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(asctime)-15s-%(levelname)s - %(message)s")

    # The purpose is to produce all the individual jenkins jobs to make up
    # a single test. That single test will test a single kernel. There are
    # several combinations that we want to be able to handle.
    #
    # 1. Provision a bare metal system from scratch. Run the standard
    #    kernel tests on it. Support all series Lucid and newer.
    #
    # 2. Provision a bare metal system from scratch. On that, provision
    #    a kvm system from scratch. Again, run the standard kernel tests
    #    on the virtual client. Support all variations of kernel host
    #    and virtual clients.
    #
    # Terms:
    #
    #   sut - (System Under Test). This is the system on which the tests
    #         will be run. If this is a bare-metal system then it is that
    #         bare-metal system that is the sut. However, if it a virtual
    #         machine that is being tested, it is the virtual-client that
    #         is the sut.
    #
    default_vm_client_template   = 'virtual-kernel-testing-job-job.mako'
    default_testing_job_template = 'testing-job.mako'

    app_description = '''
The "jenkins job creator" is a tool for creating jenkins jobs which will
provision a bare-metal system, possibly a virtual system as well, and
then run a set of tests on the provisioned "system under test" (sut).
    '''

    app_epilog = '''
examples:
    bare-metal
    ----------
        ./jjc --hw=statler --sut=real --sut-series=quantal --sut-arch=amd64
        ./jjc --hw=rizzo --sut=real --sut-series=lucid --sut-arch=amd64

        ./jjc --hw=statler --sut=real --sut-series=quantal --sut-arch=amd64 --tt=stress

    virtual client
    --------------
        ./jjc --hw=statler --vh-series=precise --vh-arch=amd64 --sut=virtual --sut-series=quantal --sut-arch=amd64
        ./jjc --hw=statler --vh-series=precise --vh-arch=amd64 --sut=virtual --sut-series=quantal --sut-arch=i386

    lts-hwe
    -------
        ./jjc --hw=rizzo --sut=real --sut-series=quantal --sut-arch=amd64 --sut-hwe
        ./jjc --hw=fozzie --sut=real --sut-series=oneiric --sut-arch=amd64 --sut-hwe
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)

    parser.add_argument('--sut',          required=True,  choices=['real', 'virtual'], help='Kind of SUT to be created.')
    parser.add_argument('--test',         required=False, default='default', help='List of tests that are to be run. This can be one or more tests or test-groups separated by a space.')
    parser.add_argument('--test-options', required=False, default='', help='A string that is passed as is to the kernel-testing script. It can be used to pass environment variables when autotest client is invoked.')

    parser.add_argument('--sut-series',   required=True,  help='The series that is to be installed on the SUT. lts-hwe-<series> denotes that a lts-hwe kernel is to be run on the appropriate lts series.')
    parser.add_argument('--sut-arch',     required=True,  choices=['amd64', 'i386', 'ppc64el'], help='The architecture (amd64 or i386) that is to be installed on the SUT.')
    parser.add_argument('--sut-hwe',      required=False, action='store_true', default=False, help='The series is for a hwe or backport kernel series.')
    parser.add_argument('--sut-series-decoration',   required=False,  help='Text that is added to the job name.')

    parser.add_argument('--vh-series',    required=False, help='If the SUT is a virtual client, a virtual host is needed. This is the series of that virtual host.')
    parser.add_argument('--vh-arch',      required=False, help='If the SUT is a virtual client, a virtual host is needed. This is the arch of that virtual host.')
    parser.add_argument('--vh-hwe',       required=False, action='store_true', default=False, help='The series is for a hwe or backport kernel series.')

    parser.add_argument('--hw',           required=True,  choices=Configuration["systems"].keys(), help='The hardware-name for the system in the hardware database that will be used for the bare metal installation portion of any of these jobs.')

    parser.add_argument('--jenkins-url',  required=False, default='http://kernel-jenkins:8080', help='URL to the jenkins host.')
    parser.add_argument('--no-autostart', required=False, action='store_true', default=False, help='Create the jenkins jobs but do not start them.')
    parser.add_argument('--no-test',      required=False, action='store_true', default=False, help='Don\'t create the test job. Sometimes you just want the job(s) that do the provisioning.')
    parser.add_argument('--tt',           required=False, default=default_testing_job_template, help='The name of the test-job template. (If you don\'t know what this is you shouldn\'t be specifying it.)')
    parser.add_argument('--vm-client-template', required=False, default=default_vm_client_template, help='The name of the template to use for provisioning the virtual-client(s) on the virtual-host. (If you don\'t know what this is you shouldn\'t be specifying it.)')
    parser.add_argument('--has-metrics',        required=False, action='store_true', default=False, help='Use this when the job generates result metrics, in order to collect those.')
    parser.add_argument('--no-provisioning',    required=False, action='store_true', default=False, help='Don\'t create the jobs which do provisioning.')
    parser.add_argument('--debs',               required=False, help='A url to the kernel debs that are to be installed after provisioning has completed.')
    parser.add_argument('--user',               required=False, help='The name of the person the test is being run for.')
    parser.add_argument('--ppa',          required=False, help='The name of a ppa to be added to the sources list and from which to pull kernel .debs.')


    args = parser.parse_args()

    if args.sut == 'real':
        setattr(args, 'sut_name', args.hw)
    else:
        setattr(args, 'sut_name', 'vm-%s' % args.hw)
        setattr(args, 'vh_name', args.hw)

    # Using the --hw key specified on the command line, expand the args.hw
    # attribute to contain specifics about that hw system.
    #
    setattr(args, 'hw_name', args.hw)  # This really doesn't make sense!
    args.hw = Configuration["systems"][args.hw]
    setattr(args, 'kt_home', find_kt_home())

    app = SutJobsFactory(args)
    result = app.main()

    exit(result)

# vi:set ts=4 sw=4 expandtab:
