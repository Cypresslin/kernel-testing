#!/usr/bin/env python
#

import sys
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, INFO, DEBUG, info, warning, debug
from lib.msgq                           import MsgQueue

# TheApp
#
class TheApp():
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args
        s.queue_name = 'kernel'

    # main
    #
    def main(s):
        '''
        '''
        retval = 1

        try:
            __import__(s.args.msg)

            if s.args.local:
                mq = MsgQueue(address='localhost', port=9123)
            else:
                mq = MsgQueue()

            msg = sys.modules[s.args.msg].Msg
            mq.publish(msg['key'], msg)

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            warning("Aborting ...")

        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
A general purpose message injection utility. Define a python dictionary
in an external file and specify that as a module on the command line to
this utility.
    '''
    app_epilog = '''
examples:
    msgpub maas_daily
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('msg', type=str, nargs=1, help='The python source file which contains a payload dictionary.')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=INFO, format=log_format)

    args.msg = args.msg[0]
    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

