#!/usr/bin/env python
#
# Clean out the test-results directory tree. This is called from cron on the
# kernel-jenkins.magners system every so often.
#

from sys                                import exit
from os                                 import getenv, path
from shutil                             import rmtree
from datetime                           import datetime
from logging                            import debug, info, basicConfig, DEBUG, INFO
from lib.grinder                        import Exit, TestResultsRepository, TestResultsRepositoryError
from lib.argparse                       import ArgumentParser, RawDescriptionHelpFormatter
from lib.utils                          import string_to_date
import json

# TestResultsReaper
#
class TestResultsReaper():

    # __init__
    #
    def __init__(self, args):
        self.cfg = args

    # main
    #
    def main(self):
        retval = 1
        try:
            # Now, actually do something.
            #
            try:
                trr = TestResultsRepository()
                for tr in trr.test_runs:
                    termination = 30
                    try:
                        results = trr.results(tr)
                    except:
                        results_dir = path.join(trr.cfg['repository_root'], tr)
                        rmtree(results_dir)
                        continue
                    job = results['attributes']['environ']['JOB_NAME']
                    ts = string_to_date(results['attributes']['timestamp'])
                    results_dir = path.join(trr.cfg['repository_root'], tr)

                    now = datetime.utcnow()
                    delta = now - ts

                    if self.cfg.user is not None:
                        if '_for_' in job:
                            (junk, user) = job.split('_for_', 1)
                            if user == self.cfg.user:
                                if self.cfg.dry_run:
                                    print('REAP: %s' % results_dir)
                                else:
                                    rmtree(results_dir)
                    if self.cfg.series is not None:
                        if results['attributes']['distro-release-name'] == self.cfg.series:
                            if self.cfg.dry_run:
                                print('REAP: %s' % results_dir)
                            else:
                                rmtree(results_dir)
                    if self.cfg.kernel:
                        if results['attributes']['kernel'] == self.cfg.kernel:
                            if self.cfg.dry_run:
                                print('REAP: %s' % results_dir)
                            else:
                                rmtree(results_dir)

                    else:
                        if '_for_' in job:
                            # This is a "custom" or "mainline build" job and has a shorter
                            # shelf life.
                            #
                            termination = 5

                        if delta.days > termination:
                            if self.cfg.dry_run:
                                print('REAP: %s' % results_dir)
                            else:
                                print('REAP: %s' % results_dir)
                                rmtree(results_dir)

                retval = 0

            except Exit:
                pass

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        return retval

if __name__ == '__main__':

    result = 0

    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(asctime)-15s-%(levelname)s - %(message)s")
    info('Started')

    app_description = '''
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--user',     required=False, help='Delete all the testing results for custom test runs for a particular user.')
    parser.add_argument('--series',   required=False, help='Delete all the testing results for a particular series.')
    parser.add_argument('--kernel',   required=False, help='Delete all the testing results for a particular kernel.')
    parser.add_argument('--dry-run',  action='store_true', default=False, help='Don\'t do anything, just print out what would be done.')
    args = parser.parse_args()

    app = TestResultsReaper(args)
    result = app.main()

    info('That\'s All Folks!')
    exit(result)

# vi:set ts=4 sw=4 expandtab:
