#!/usr/bin/env python3
#

from sys                                import stderr
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, INFO
from lib.log                            import center, cleave
from lib.ubuntu                         import Ubuntu
import json
import requests
import re

# Results
#
class Results(object):
    '''
    '''

    # __init__
    #
    def __init__(s):
        '''
        '''
        pass

    def current_sru_versions(s):
        #                              .- package name (group(1))
        #                             /           .- kernel version (group(2))
        #                            /           /          .- version/abi separator (group(3))
        #                           /           /          /
        ver_rc     = re.compile("(\S+): (\d+\.\d+\.\d+)([-\.])(\d+)\.(\d+)([~a-z\d.]*)")
        #                                                       /      /       /
        #                                                      /      /       .- backport extra (m.group(6))
        #                                                     /      .- upload number (m.group(5))
        #                                                    .- abi (group(4))

        versions = []

        r = requests.get('http://kernel.ubuntu.com/sru/kernel-sru-workflow.json')
        trackers = json.loads(r.text)

        for project in ['kernel-development-workflow', 'kernel-sru-workflow']:
            if project not in trackers['bug-collections']:
                continue
            for x in trackers['bug-collections'][project]['bugs']:
                bug = trackers['bug-collections'][project]['bugs'][x]
                title = bug['title']

                m = ver_rc.search(title)
                if m is not None:
                    version = '%s%s%s.%s%s' % (m.group(2), m.group(3), m.group(4), m.group(5), m.group(6))
                    versions.append(version)

        return versions

    def add_record(s, series, flavour, kernel, arch, suite, link, passed, pdelta, failed, fdelta):
        if series not in s.delta:
            s.delta[series] = {}

        if flavour not in s.delta[series]:
            s.delta[series][flavour] = {}

        if kernel not in s.delta[series][flavour]:
            s.delta[series][flavour][kernel] = {}

        if 'suites-results' not in s.delta[series][flavour][kernel]:
            s.delta[series][flavour][kernel]['suites-results'] = {}

        if arch not in s.delta[series][flavour][kernel]['suites-results']:
            s.delta[series][flavour][kernel]['suites-results'][arch] = {}

        if suite not in s.delta[series][flavour][kernel]['suites-results'][arch]:
            s.delta[series][flavour][kernel]['suites-results'][arch][suite] = {}

        s.delta[series][flavour][kernel]['suites-results'][arch][suite]['link'] = link
        s.delta[series][flavour][kernel]['suites-results'][arch][suite]['passed'] = passed
        s.delta[series][flavour][kernel]['suites-results'][arch][suite]['pdelta'] = pdelta
        s.delta[series][flavour][kernel]['suites-results'][arch][suite]['failed'] = failed
        s.delta[series][flavour][kernel]['suites-results'][arch][suite]['fdelta'] = fdelta

    # deltas
    #
    def deltas(s):

        if args.sru:
            versions = s.current_sru_versions()

        s.delta = {}
        # series
        #
        for series in s.db:
            # flavour
            #
            for flavour in s.db[series]:
                pkernel = None

                # kernel
                #
                for kernel in sorted(s.db[series][flavour]):
                    # arch
                    #
                    for arch in s.db[series][flavour][kernel]['suites-results']:
                        # suite
                        #
                        for suite in s.db[series][flavour][kernel]['suites-results'][arch]:
                            link = s.db[series][flavour][kernel]['suites-results'][arch][suite]['link']
                            (passed, failed) = s.db[series][flavour][kernel]['suites-results'][arch][suite]['totals']
                            if pkernel is not None:
                                try:
                                    (ppassed, pfailed) = s.db[series][flavour][pkernel]['suites-results'][arch][suite]['totals']

                                    fdelta = failed - pfailed
                                    pdelta = passed - ppassed

                                    if args.sru and kernel not in versions:
                                        continue

                                    s.add_record(series, flavour, kernel, arch, suite, link, passed, pdelta, failed, fdelta)
                                    # if pdelta != 0:
                                    #     s.add_record(series, flavour, kernel, arch, suite, passed, pdelta, failed, fdelta)
                                    #     # print('%8s %8s %20s %-8s %40s : %3d %3d (%d) (%s)' % (series, flavour, kernel, arch, suite, passed, ppassed, pdelta, pkernel))
                                except KeyError:
                                    ppassed = 0
                                    pfailed = 0
                            else:
                                if kernel not in versions:
                                    continue

                                s.add_record(series, flavour, kernel, arch, suite, link, passed, 0, failed, 0)
                                # print('%8s %8s %20s %-8s %40s : %3d' % (series, flavour, kernel, arch, suite, passed))
                    pkernel  = kernel

    # main
    #
    def main(s, args):
        center(s.__class__.__name__ + '.main')
        retval = 0
        s.db = {}
        for fid in args.results:
            # bjf stderr.write('%s\n' % fid)
            with open(fid, 'r') as f:
                data = json.load(f)
            try:
                if data['distro-release-name'] not in s.db:
                    s.db[data['distro-release-name']] = {}
                if data['kernel-flavour'] not in s.db[data['distro-release-name']]:
                    s.db[data['distro-release-name']][data['kernel-flavour']] = {}
                s.db[data['distro-release-name']][data['kernel-flavour']][data['kernel']] = data
                pass
            except KeyError:
                # Just ignore it and move along
                pass
        s.deltas()
        print(json.dumps(s.delta, sort_keys=True, indent=4))
        cleave(s.__class__.__name__ + '.main (%d)' % retval)
        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='')
    parser.add_argument('--sru', action='store_true', default=False, help='')
    parser.add_argument('results', nargs='+', help='')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    if args.debug:
        log_format = "%(levelname)s - %(message)s"
        basicConfig(level=DEBUG, format=log_format)
    else:
        log_format = "%(message)s"
        basicConfig(level=INFO, format=log_format)

    try:
        app = Results()
        retval = app.main(args)
    except KeyboardInterrupt:
        pass

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
