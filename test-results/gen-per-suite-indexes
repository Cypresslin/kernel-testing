#!/usr/bin/env python
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, INFO, DEBUG
from lib.log                            import cdebug, Clog
from datetime                           import datetime
from os                                 import path, makedirs

from mako.template                      import Template
from mako.exceptions                    import RichTraceback

from lib.grinder                        import Exit, load_template

from test_results                       import TestResults

# TheApp
#
class TheApp():
    '''
    '''
    def generate_per_suite_indexes(self):
        cdebug('--------------------------------------------------')

        test_results = TestResults()
        data = test_results.collect_results()

        for who in data.keys():
            sr = {} # suite results
            cdebug('Building test-suite focused dictionary for %s' % who)
            for series in data[who]:
                cdebug('    series: %s' % series)
                for kver in data[who][series]:
                    cdebug('        kver: %s' % kver)
                    for flavour in data[who][series][kver]:
                        cdebug('            flavour: %s' % flavour)
                        kver_flav = '%s&%s' % (kver, flavour)
                        for test_run in data[who][series][kver][flavour]:
                            attributes = test_run['attributes']

                            # decode the arch
                            #
                            hostname = attributes['platform']['hostname']
                            arch = test_results.arch_from_proc(attributes['platform']['proc'])

                            dt = datetime.strptime(attributes['timestamp'], '%Y-%m-%d %H:%M')
                            ts = dt.strftime('%Y-%m-%d_%H-%M-%S')

                            results = test_run['results']
                            for k in results['suites']:
                                suite = k['name'].replace('autotest.', '')

                                if suite not in sr:
                                    sr[suite] = {}

                                if kver not in sr[suite]:
                                    sr[suite][kver] = {flavour: {}}

                                if arch not in sr[suite][kver]:
                                    sr[suite][kver][flavour][arch] = {}

                                if ts not in sr[suite][kver][flavour][arch]:
                                    sr[suite][kver][flavour][arch][ts] = {}

                                if suite == 'qrt_apparmor':
                                    cdebug("            New: %s %s %s %s %s" % (suite, kver, arch, ts, hostname), 'green')

                                sr[suite][kver][flavour][arch][ts][hostname] = {}
                                sr[suite][kver][flavour][arch][ts][hostname]['failed']  = k['tests failed']
                                sr[suite][kver][flavour][arch][ts][hostname]['ran']     = k['tests run']
                                sr[suite][kver][flavour][arch][ts][hostname]['passed']  = k['tests run'] - k['tests failed']

                                link = "%s__%s__%s/%s-test-suite.html" % (hostname, kver, ts, suite)
                                sr[suite][kver][flavour][arch][ts][hostname]['link'] = link

                                sr[suite][kver][flavour][arch][ts][hostname]['timestamp'] = attributes['timestamp']

            for suite in sr:
                cdebug('suite: %s' % suite)
                for kver in sr[suite]:
                    cdebug('    kver: %s' % kver)
                    for flavour in sr[suite][kver]:
                        for arch in sr[suite][kver][flavour]:
                            cdebug('    arch: %s' % arch)

                            xs = suite.replace('autotest.', '')
                            if who == 'sru':
                                fname = '%s-%s-%s-index.html' % (suite.replace('autotest.', ''), kver, arch)
                            else:
                                fname = '%s-%s-%s-%s-index.html' % (who, suite.replace('autotest.', ''), kver, arch)

                            # Generate the testing, index page.
                            #
                            try:
                                p = path.join(test_results.trr.cfg['repository_root'], '%s-%s' % (kver, flavour))
                                if not path.exists(p):
                                    makedirs(p)

                                suite_index_template = Template(load_template('suite-index.mako'))
                                cdebug('xs: %s' % xs, 'blue')
                                template = suite_index_template.render(suite=xs, kver=kver, arch=arch, data=sr[suite][kver][flavour][arch], timestamp=datetime.utcnow())
                                dest = path.join(test_results.trr.cfg['repository_root'], '%s-%s' % (kver, flavour), fname)
                                cdebug('Generating: %s' % dest, 'green')
                                with open(dest, 'w') as f:
                                    f.write(template)

                            except:
                                traceback = RichTraceback()
                                for (filename, lineno, function, line) in traceback.traceback:
                                    print("File %s, line %s, in %s" % (filename, lineno, function))
                                    print(line, "\n")
                                print("%s: %s" % (str(traceback.error.__class__.__name__), traceback.error))


    # main
    #
    def main(self):
        cdebug("Enter Digest.main")

        try:
            self.generate_per_suite_indexes()

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        except Exit:
            pass

        cdebug("Leave Digest.main")
        return


if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
I'm a application skeleton, your job is to make me into something useful.
    '''
    app_epilog = '''
examples:
    process --help
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--nc', action='store_true', default=False, help='Debut output should not be colored.')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
        Clog.dbg = True
        Clog.color = not args.nc
    else:
        basicConfig(level=INFO, format=log_format)

    app = TheApp()
    exit(app.main())

# vi:set ts=4 sw=4 expandtab:
