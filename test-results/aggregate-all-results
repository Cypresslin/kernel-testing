#!/usr/bin/env python3
#

from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, INFO
from lib.log                            import center, cleave
import json
import requests
import re

# Results
#
class Results(object):
    '''
    '''

    # __init__
    #
    def __init__(s):
        '''
        '''
        pass

    def current_sru_versions(s):
        #                              .- package name (group(1))
        #                             /           .- kernel version (group(2))
        #                            /           /          .- version/abi separator (group(3))
        #                           /           /          /
        ver_rc     = re.compile("(\S+): (\d+\.\d+\.\d+)([-\.])(\d+)\.(\d+)([~a-z\d.]*)")
        #                                                       /      /       /
        #                                                      /      /       .- backport extra (m.group(6))
        #                                                     /      .- upload number (m.group(5))
        #                                                    .- abi (group(4))

        versions = []

        r = requests.get('http://kernel.ubuntu.com/sru/kernel-sru-workflow.json')
        trackers = json.loads(r.text)

        for project in ['kernel-development-workflow', 'kernel-sru-workflow']:
            if project not in trackers['bug-collections']:
                continue
            for x in trackers['bug-collections'][project]['bugs']:
                bug = trackers['bug-collections'][project]['bugs'][x]
                title = bug['title']

                m = ver_rc.search(title)
                if m is not None:
                    version = '%s%s%s.%s%s' % (m.group(2), m.group(3), m.group(4), m.group(5), m.group(6))
                    versions.append(version)

        return versions

    # main
    #
    def main(s, args):
        center(s.__class__.__name__ + '.main')
        retval = 0

        if args.sru:
            versions = s.current_sru_versions()

        aggregate = {}
        for fid in args.results:
            with open(fid, 'r') as f:
                data = json.load(f)

            kernel  = data['kernel']
            if args.sru and kernel not in versions:
                continue

            series  = data['distro-release-name']
            flavour = data['kernel-flavour']

            if series not in aggregate:
                aggregate[series] = {}
            aggregate[series]['%s - %s' % (kernel, flavour)] = data

        print(json.dumps(aggregate, sort_keys=True, indent=4))

        cleave(s.__class__.__name__ + '.main (%d)' % retval)
        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='')
    parser.add_argument('--sru', action='store_true', default=False, help='')
    parser.add_argument('results', nargs='+', help='')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    if args.debug:
        log_format = "%(levelname)s - %(message)s"
        basicConfig(level=DEBUG, format=log_format)
    else:
        log_format = "%(message)s"
        basicConfig(level=INFO, format=log_format)

    try:
        app = Results()
        retval = app.main(args)
    except KeyboardInterrupt:
        pass

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
