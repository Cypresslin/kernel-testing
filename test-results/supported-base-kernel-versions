#!/usr/bin/env python3
#

from sys                                import stderr
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, INFO
from lib.log                            import center, cleave
from lib.ubuntu                         import Ubuntu
import json
import requests
import re

# Results
#
class Results(object):
    '''
    '''

    # __init__
    #
    def __init__(s):
        '''
        '''
        pass

    # main
    #
    def main(s, args):
        center(s.__class__.__name__ + '.main')
        retval = 0
        for k in Ubuntu.index_by_kernel_version:
            try:
                if Ubuntu.index_by_kernel_version[k]['development']:
                    print(k)
                elif Ubuntu.index_by_kernel_version[k]['supported']:
                    print(k)
            except KeyError:
                pass
        cleave(s.__class__.__name__ + '.main (%d)' % retval)
        return retval

if __name__ == '__main__':
    retval = -1

    # Command line argument setup and initial processing
    #
    app_description = '''
    '''
    app_epilog = '''
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='')

    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    if args.debug:
        log_format = "%(levelname)s - %(message)s"
        basicConfig(level=DEBUG, format=log_format)
    else:
        log_format = "%(message)s"
        basicConfig(level=INFO, format=log_format)

    try:
        app = Results()
        retval = app.main(args)
    except KeyboardInterrupt:
        pass

    exit(retval)

# vi:set ts=4 sw=4 expandtab syntax=python:
