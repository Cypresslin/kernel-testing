#!/usr/bin/env python
#

from os                                 import makedirs, path, listdir
from argparse                           import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import basicConfig, DEBUG, WARNING
from lib.log                            import cdebug, center, cleave
from datetime                           import datetime

from lib.grinder                        import load_template
from mako.template                      import Template
from mako.exceptions                    import RichTraceback

import json

# TheApp
#
class TheApp():
    '''
    This class is just the engine that makes everything go.
    '''

    # __init__
    #
    def __init__(s, args):
        '''
        '''
        s.args = args


    # main
    #
    def main(s):
        '''
        '''
        center("TheApp::main")
        retval = 1

        maas_template = Template(load_template('maas-daily-status.mako'))

        data = {}
        for fid in listdir(s.args.root):
            if not fid.endswith('.json'):
                continue

            with open('%s/%s' % (s.args.root, fid), 'r') as f:
                tmp = json.load(f)

            if tmp['op'] == 'provisioning.succeeded':
                tmp['status'] = 'Passed'
            else:
                tmp['status'] = 'Failed'
            key = '%s.%s.%s' % (tmp['series-name'], tmp['sut-arch'], tmp['sut-name'])
            data[key] = tmp

        try:
            template = maas_template.render(data=data, title='MAAS Daily Image Status', timestamp=datetime.utcnow())
            with open('%s/index.html' % (s.args.root), 'w') as f:
                f.write(template)
        except:
            traceback = RichTraceback()
            for (filename, lineno, function, line) in traceback.traceback:
                print("File %s, line %s, in %s" % (filename, lineno, function))
                print(line, "\n")
            print("%s: %s" % (str(traceback.error.__class__.__name__), traceback.error))

        cleave("TheApp::main")
        return retval

if __name__ == '__main__':
    # Command line argument setup and initial processing
    #
    app_description = '''
Monitor the kernel RabbitMQ exchange and handle any messages with
the 'kernel-testing-status' key.
    '''
    app_epilog = '''
examples:
    kmsgq-maas-daily-image-status /var/lib/jenkins/metrics/maas-status
    '''
    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--debug', action='store_true', default=False, help='Print out a lot of messages about what is going on.')
    parser.add_argument('--local', action='store_true', default=False, help='Assume we have sshuttle setup to the MQ server.')
    parser.add_argument('root', help='Path to where the status messages are to be stored')
    args = parser.parse_args()

    # If logging parameters were set on the command line, handle them
    # here.
    #
    log_format = "%(levelname)s - %(message)s"
    if args.debug:
        basicConfig(level=DEBUG, format=log_format)
    else:
        basicConfig(level=WARNING, format=log_format)

    app = TheApp(args)
    exit(app.main())


# vi:set ts=4 sw=4 expandtab:

