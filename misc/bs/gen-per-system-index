#!/usr/bin/env python
#

from sys                                import stdout
from os                                 import getenv, path, listdir
from lib.argparse                       import ArgumentParser, RawDescriptionHelpFormatter
from logging                            import error, basicConfig, INFO, DEBUG
from datetime                           import datetime

from lib.exceptions                     import ErrorExit
from lib.utils                          import date_to_string
import json

from mako.template                      import Template, exceptions

# ProcessBootspeedResults
#
class ProcessBootspeedResults():
    '''
    '''

    # __init__
    #
    def __init__(s, args):
        s.args = args

    def system_title(s, mac, data):
        return mac

    # main
    #
    def main(s):
        retval = 1
        try:
            results = {}

            # Pull all the results files into a single dictionary
            #
            if path.exists(s.args.results):
                systems = {}
                sys_file = path.join(s.args.results, 'systems.json')
                if path.exists(sys_file):
                    with open(sys_file, 'r') as f:
                        systems = json.load(f)

                for d in listdir(s.args.results):
                    if not path.isdir(path.join(s.args.results, d)):
                        continue
                    base = s.args.results
                    results_file = path.join(s.args.results, d, 'results.json')
                    with open(results_file, 'r') as f:
                        results[d] = json.load(f)
            else:
                raise ErrorExit('The directory (%s) does not exist.' % s.args.data)

            # Generate an index of the dictionary records by
            # mac address.
            #
            index = {}
            index['mac_address'] = {}

            for k in results:
                mac = results[k]['properties']['mac_address']
                try:
                    index['mac_address'][mac].append(k)
                except KeyError:
                    index['mac_address'][mac] = []
                    index['mac_address'][mac].append(k)


            for mac in index['mac_address']:
                for k in index['mac_address'][mac]:

                    try:
                        mako_template = Template(filename=s.args.template, format_exceptions=True)
                        ofid = path.join(s.args.results, '%s.html' % mac.replace(':', '-'))
                        with open(ofid, "w") as f:
                            f.write(mako_template.render(runs=index['mac_address'][mac], systems=systems, report_title = s.system_title(mac, results), template_data = results, timestamp = date_to_string(datetime.utcnow())))
                    except:
                        print exceptions.text_error_template().render()

            retval = 0

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            print("Aborting ...")

        except ErrorExit as e:
            error(e.message)

        if retval > 0:
            error("")
            error("Due to the above error(s), this script is unable to continue and is terminating.")
            error("")

        return retval

if __name__ == '__main__':
    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = INFO
    basicConfig(level=LOGLEVEL, format="%(levelname)s - %(message)s")

    app_description = '''
    '''

    app_epilog = '''
    '''

    parser = ArgumentParser(description=app_description, epilog=app_epilog, formatter_class=RawDescriptionHelpFormatter)
    parser.add_argument('--template', required=True, type=str, help='The MAKO template file that is to be used.')
    parser.add_argument('results', metavar='RESULTS_DIR', type=str, nargs=1, help='Root directory containing all the individual boot speed runs.')

    args = parser.parse_args()
    args.results = args.results[0] # There can be only one

    app = ProcessBootspeedResults(args)
    exit(app.main())

# vi:set ts=4 sw=4 expandtab syntax=python:
