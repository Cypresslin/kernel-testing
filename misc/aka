#!/usr/bin/env python
#
# Take a tree of test results and process it, producing a set of html
# reports.
#

from os                                 import getenv
from sys                                import exit
from logging                            import debug, error, basicConfig, DEBUG, WARNING
from lib.argparse                       import ArgumentParser, RawDescriptionHelpFormatter
from lib.jenkins                        import JenkinsException

from aka_jenkins                        import Server, Nodes, Jobs

# Aka
#
class Aka():
    """
    """

    # main
    #
    def main(self):
        debug('Enter: main')
        retval = 0
        try:
            parser = ArgumentParser()
            subparsers = parser.add_subparsers()
            parser.add_argument('-u', '--url',  help='The url to the Jenkins server the operation is to be perfomed against.')

            server_parser = subparsers.add_parser('server')
            server_parser.set_defaults(func=Server.info)

            job_clone_parser = subparsers.add_parser('job-clone')
            job_clone_parser.set_defaults(func=Jobs.clone)
            job_clone_parser.add_argument('existing_job', type=str, help='Name of the job which is to be cloned. Must exist.')
            job_clone_parser.add_argument('clone_job',    type=str, help='Name of the new job which is to be created. An error will be returned if the job already exists and the overwrite option was not specified.')
            job_clone_parser.add_argument('-o', '--overwrite', action='store_true', help='If the a job already exists with the clone name, it will be deleted and a new clone created.')

            job_create_parser = subparsers.add_parser('job-create')
            job_create_parser.set_defaults(func=Jobs.create)

            job_delete_parser = subparsers.add_parser('job-start')
            job_delete_parser.set_defaults(func=Jobs.start)
            job_delete_parser.add_argument('jobs', nargs='+')

            job_delete_parser = subparsers.add_parser('job-stop')
            job_delete_parser.set_defaults(func=Jobs.stop)
            job_delete_parser.add_argument('jobs', nargs='+')

            job_delete_parser = subparsers.add_parser('job-delete')
            job_delete_parser.set_defaults(func=Jobs.delete)
            job_delete_parser.add_argument('jobs', nargs='+')

            job_list_parser = subparsers.add_parser('job-list')
            job_list_parser.set_defaults(func=Jobs.lister)
            job_list_parser.add_argument('-l', '--long',  dest='details', required=False, action='store_true', help='Produce a longer, more detailed listing.')
            job_list_parser.add_argument('-i', '--info',  dest='info', required=False, action='store_true', help='Print out the xml representation of the job.')
            job_list_parser.add_argument('jobs', nargs='*')

            job_control_parser = subparsers.add_parser('job-control')
            job_control_parser.set_defaults(func=Jobs.control)
            job_control_parser.add_argument('jobs', nargs='*')
            group = job_control_parser.add_mutually_exclusive_group(required=True)
            group.add_argument('-e', '--enable',  action='store_true', help='Enable the specified jobs.')
            group.add_argument('-d', '--disable', action='store_true', help='Diable the specified jobs.')

            node_details_parser = subparsers.add_parser('node-details')
            node_details_parser.set_defaults(func=Nodes.details)
            node_details_parser.add_argument('nodes', nargs='*')

            node_list_parser = subparsers.add_parser('node-list')
            node_list_parser.set_defaults(func=Nodes.lister)
            node_list_parser.add_argument('-l', '--long',   dest='details', required=False, action='store_true', help='Produce a longer, more detailed listing.')
            node_list_parser.add_argument('-f', '--format', dest='format', required=False, help='Specify the format to display the listing.')
            node_list_parser.add_argument('nodes', nargs='*')

            node_delete_parser = subparsers.add_parser('node-delete')
            node_delete_parser.set_defaults(func=Nodes.delete)
            node_delete_parser.add_argument('nodes', nargs='*')

            ep = "examples:\n"
            ep +="   aka node-create -l ssh -f /var/lib/jenkins -e 2 -p \"{ 'host' : 'quantal-amd64-server', 'username' : 'jenkins', 'password' : 'LcRZz/GLEYLQ8XuAsK+moZSLxaZRT0C/hBdTWRxpmVY='}\" quantal-slave"
            node_create_parser = subparsers.add_parser('node-create', epilog=ep, formatter_class=RawDescriptionHelpFormatter)
            node_create_parser.set_defaults(func=Nodes.create)
            node_create_parser.add_argument('node', nargs=1, help='Name of the node to be created.')
            node_create_parser.add_argument('-t', '--tags', default='', help='Node tags/labels. One or more strings with spaces between them.')
            node_create_parser.add_argument('-d', '--description', default='', help='Node description.')
            node_create_parser.add_argument('-l', '--launcher', required=True, choices=['ssh', 'command', 'windows-service'], help='Controls how Jenkins starts this slave.')
            node_create_parser.add_argument('-p', '--params', help='A set of parameters specific to the type of launcher. This is a dictionary specified as a json format string.')
            node_create_parser.add_argument('-f', '--filesystem', required=True, help='Absolute path of the working directory on the slave.')
            node_create_parser.add_argument('-e', '--executors', type=int, default=2, help='The number of concurrent builds the slave can handle.')
            node_create_parser.add_argument('-x', '--exclusive', action='store_true', help='Use this slave for tied jobs only.')

            args = parser.parse_args()
            retval = args.func(args)

        except JenkinsException as e:
            error(e.message)

        # Handle the user presses <ctrl-C>.
        #
        except KeyboardInterrupt:
            pass

        debug('Leave: main')
        exit(retval)

if __name__ == '__main__':
    if getenv('DEBUG'):
        LOGLEVEL = DEBUG
    else:
        LOGLEVEL = WARNING
    basicConfig(level=LOGLEVEL, format="%(levelname)s - %(message)s")
    app = Aka()
    app.main()

# vi:set ts=4 sw=4 expandtab:

